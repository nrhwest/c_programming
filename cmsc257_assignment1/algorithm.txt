void integerQuickSort(int int_array[], int low, int high) {
  printf("\nquicksort begins...\n");
  if (low < high) {
    /* pi is partitioning index, arr[p] is now at right place */
        int pi = partition(int_array, low, high);
        integerQuickSort(int_array, low, pi-1);
        integerQuickSort(int_array, pi+1, high);
  }
  printf("\nquicksort ends...\n");

}

int partition(int int_array[], int low, int high) {
  int pivot =  int_array[high];
  int i = (low - 1);
  int j;
  for (j = low; j <= high - 1; j++) {
    if (int_array[j] <= pivot) {
      i++;
      swap(&int_array[i], &int_array[j]);
    }
  }
  swap(&int_array[i + 1], &int_array[high]);
  return (i + j);
}

int swap(int* a, int* b) {
  int temp = *a;
  *a = *b;
  *b = temp;
  return 0;
}


/////////////////////////////////////////////////////////////////

void integerQuickSort(int *int_array, int low, int high)
{
  int pivot, i, j, temp;
  if(low < high) {
    pivot = low; // select a pivot element
    i = low;
    j = high;
    while(i < j) {
      // increment i till you get a number greater than the pivot element
      while(int_array[i] <= int_array[pivot] && i <= high)
        i++;
      // decrement j till you get a number less than the pivot element
      while(int_array[j] > int_array[pivot] && j >= low)
        j--;
      // if i < j swap the elements in locations i and j
      if(i < j) {
        temp = int_array[i];
        int_array[i] = int_array[j];
        int_array[j] = temp;
      }
    }

    // when i >= j it means the j-th position is the correct position
    // of the pivot element, hence swap the pivot element with the
    // element in the j-th position
    temp = int_array[j];
    int_array[j] = int_array[pivot];
    int_array[pivot] = temp;
    // Repeat quicksort for the two sub-arrays, one to the left of j
    // and one to the right of j
    integerQuickSort(int_array, low, j-1);
    integerQuickSort(int_array, j+1, high);
  }
}

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

int remainder, n = val;
int binary = 0, k = 1;


  while(n != 0) {
      remainder = n%2;
      n = n/2;
      binary= binary + (remainder*k);
      k = k*10;
  }
  printf("\nbinary=%d\n", binary);

// int res = 0;
//   while (val)
//   {
//       /* make space by shifting left on the result */
//       res <<= 1;
//       /* add the low bit in to the space */
//       res |= val & 1;
//       /* get a new low bit. */
//       val >>= 1;
//   }
//   printf("\nres=%d\n", res);

int reversed = 0;
int original = binary;

printf("bfloop original=%d\n", original);
for(i=0;i<8;i++) {
   reversed |= ((original>>i) & 1)<<(7-i);
   printf("inloop original=%d\n", original);
 }
 printf("afloop original = %d\n", original);

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class cmsc401 {

// TEST W/ : 6 1 8 3 6 2 7
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Scanner scan = new Scanner(System.in);
		int n = scan.nextInt();
		int[] data = new int[n];
		for (int i = 0; i < data.length; i++) {
			data[i] = scan.nextInt();
		}

		// int[] array = {9, 8, 7, 6, 5, 0, 1, 2, 3, 4};

		for (int i = 0; i < data.length; i++) {
			System.out.println(selectRecursive(data, i));
		}



	}

	public static int selectRecursive(int[] array, int n) {
		return recursive(array, 0, array.length - 1, n);
	}

	// Returns the n-th smallest element of list within left..right inclusive
  	// (i.e. left <= n <= right).
  	// The size of the list is not changing with each recursion.
  	// Thus, n does not need to be updated with each round.
	private static int recursive(int[] array, int left, int right, int n) {
		if (left == right) { // If the list contains only one element,
			return array[left]; // return that element
		}

		// select a pivotIndex between left and right
		int pivotIndex = randomPivot(left, right);
		pivotIndex = partition(array, left, right, pivotIndex);
		// The pivot is in its final sorted position
		if (n == pivotIndex) {
			return array[n];
		} else if (n < pivotIndex) {
			return recursive(array, left, pivotIndex - 1, n);
		} else {
			return recursive(array, pivotIndex + 1, right, n);
		}
	}

	/**
	*	In quicksort, there is a subprocedure called partition that can, in
	*	linear time, group a list (ranging from indices left to right) into two
	*	parts, those less than a certain element, and those greater than or
	*	equal to the element. Here is pseudocode that performs a partition about
	*	the element list[pivotIndex]
	*/
	private static int partition(int[] array, int left, int right, int pivotIndex) {
		int pivotValue = array[pivotIndex];
		swap(array, pivotIndex, right); // move pivot to end
		int storeIndex = left;
		for(int i = left; i < right; i++) {
			if(array[i] < pivotValue) {
				swap(array, storeIndex, i);
				storeIndex++;
			}
		}
		swap(array, right, storeIndex); // Move pivot to its final place
		return storeIndex;
	}

	private static void swap(int[] array, int a, int b) {
		int tmp = array[a];
		array[a] = array[b];
		array[b] = tmp;
	}

	private static int randomPivot(int left, int right) {
		return left + (int) Math.floor(Math.random() * (right - left + 1));
	}
	public static int selectIterative(int[] array, int n) {
		return iterative(array, 0, array.length - 1, n);
	}

  	private static int iterative(int[] array, int left, int right, int n) {
  		if(left == right) {
  			return array[left];
  		}

  		for(;;) {
  			int pivotIndex = randomPivot(left, right);
  			pivotIndex = partition(array, left, right, pivotIndex);

  			if(n == pivotIndex) {
  				return array[n];
  			} else if(n < pivotIndex) {
  				right = pivotIndex - 1;
  			} else {
  				left = pivotIndex + 1;
  			}
  		}
	}
}
